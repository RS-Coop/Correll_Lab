<%BEGIN_DEFINITION_TEMPLATE>

/*************
* conv1d.cpp
*
* Conv1D Layer
* Hardware Plateform: ESP-32
*
* This file defines the functions needed to build a 1D Convolutional layer, and perform a forward pass.
*/

#include "conv1d.h"


Conv1D buildConv1D(<%WEIGHT_DATATYPE_DELIMITER>* W, <%WEIGHT_DATATYPE_DELIMITER>* b,
				   <%INDEX_DATATYPE_DELIMITER> kernel_size, <%INDEX_DATATYPE_DELIMITER> stride,
				   <%INDEX_DATATYPE_DELIMITER> input_channels, <%INDEX_DATATYPE_DELIMITER> output_channels,
				   <%INDEX_DATATYPE_DELIMITER> input_size)
{
	Conv1D layer;

	layer.weights = W;
	layer.bias = b;

	layer.kernel_shape[0] = kernel_size;
	layer.kernel_shape[1] = input_channels;
	layer.kernel_shape[2] = output_channels;

	layer.stride = 1;				// NOTE: NOT YET IMPLEMENTED

	layer.input_shape[0] = input_size;
	layer.input_shape[1] = input_channels;

	layer.output_shape[0] = layer.input_shape[0] - layer.kernel_shape[1] + 1;
	layer.output_shape[1] = layer.kernel_shape[2];

	return layer;
}


void fwdConv1D(Conv1D* layer, <%LAYER_DATATYPE_DELIMITER>* input, <%LAYER_DATATYPE_DELIMITER>* output)
{
	// Dereference the provided layer to simplify the code
	Conv1D L = (*layer);

	// Loop through to calculate the output at each point
	for(<%INDEX_DATATYPE_DELIMITER> output_position = 0; output_position < L.output_shape[0]; output_position++)
	{
		for(<%INDEX_DATATYPE_DELIMITER> output_channel = 0; output_channel < L.output_shape[1]; output_channel++)
		{
			// Convert the 2D output index (i,j) to the 1D index in the provided array
			output_idx = output_position*L.kernel_shape[2] + output_channel;

			// Start with the bias
			output[output_idx] = L.bias[output_channel];

			// Now multiply the input by the weight matrix
			<%INDEX_DATATYPE_DELIMITER> input_position = output_position * L.stride;
			for(<%INDEX_DATATYPE_DELIMITER> kernel_position = 0; kernel_position < L.kernel_shape[0]; kernel_position++)
			{
				for(<%INDEX_DATATYPE_DELIMITER> input_channel = 0; input_channel < L.kernek_shape[1]; kernel_shape++)
				{
					// What are the flattened indices of the weight matrix and input
					weight_idx = L.kernel_shape[1] * L.kernel_shape[2] * kernel_position +
					             L.kernel_shape[2] * input_channel + output_channel;
					input_idx = (input_position + kernel_position) * L.kernel_shape[1] + input_channel;

					output[output_idx] += L.weights[weight_idx] * input[input_idx];
				}
			}

			// Now perform the activation function
			// NOTE: NEED TO IMPLEMENT
		}
	}
}

<%END_DEFINITION_TEMPLATE>

<%BEGIN_INIT_TEMPLATE>
Conv1D <%LAYER_NAME> = buildConv1D(<%WEIGHT_NAME>, <%BIAS_NAME>, <%KERNEL_SIZE>, <%STRIDE_SIZE>, <%INPUT_CHANNELS>, <%OUTPUT_CHANNELS>, <%INPUT_SIZE>);
<%END_INIT_TEMPLATE>

<%BEGIN_FWD_TEMPLATE>
fwdConv1D(<%LAYER_NAME>, <%INPUT>, <%OUTPUT>);
<%END_FWD_TEMPLATE>
