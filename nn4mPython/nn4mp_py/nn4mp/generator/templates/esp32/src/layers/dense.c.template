<%BEGIN_DEFINITION_TEMPLATE>
/*************
* conv1d.cpp
*
* Conv1D Layer
* Hardware Plateform: ESP-32
*
* This file defines the functions needed to build a dense layer, and perform a forward pass.
*/

#include "dense.h"


Dense buildDense(<%WEIGHT_DATATYPE_DELIMITER>* W, <%WEIGHT_DATATYPE_DELIMITER>* b,
				 <%INDEX_DATATYPE_DELIMITER> input_size, <%INDEX_DATATYPE_DELIMITER> output_size)
{
	Dense layer;

	layer.weights = W;
	layer.bias = b;

	layer.input_size = input_size;
	layer.output_size = output_size;

	return layer;
}


void fwdDense(Dense* layer, <%LAYER_DATATYPE_DELIMITER>* input, <%LAYER_DATATYPE_DELIMITER>* output)
{
	// Dereference the provided layer to simplify the code
	Dense L = (*layer);

	// Loop through to calculate the output at each point
	for(<%INDEX_DATATYPE_DELIMITER> output_idx = 0; output_idx < L.output_size; output_idx++)
	{
		// Start with the bias
		output[output_idx] = L.bias[output_idx];

		for(<%INDEX_DATATYPE_DELIMITER> input_idx = 0; input_idx < L.input_size; input_idx++)
		{
			<%INDEX_DATATYPE_DELIMITER> weight_idx = input_idx * L.output_size + output_idx;

			output[output_idx] += L.weights[weight_idx] * input[input_idx];
		}

		// Now perform the activation function
		// NOTE: NEED TO IMPLEMENT
	}
}
<%END_DEFINITION_TEMPLATE>


<%BEGIN_INIT_TEMPLATE>
Dense <%LAYER_NAME> = buildDense(<%WEIGHT_NAME>, <%BIAS_NAME>, <%INPUT_SIZE>, <%OUTPUT_SIZE>);
<%END_INIT_TEMPLATE>

<%BEGIN_FWD_TEMPLATE>
fwdDense(<%LAYER_NAME>, <%INPUT>, <%OUTPUT>);
<%END_FWD_TEMPLATE>
