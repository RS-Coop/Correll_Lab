# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_activation', [dirname(__file__)])
        except ImportError:
            import _activation
            return _activation
        if fp is not None:
            try:
                _mod = imp.load_module('_activation', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _activation = swig_import_helper()
    del swig_import_helper
else:
    import _activation
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def activate(arg1, arg2, arg3):
    return _activation.activate(arg1, arg2, arg3)
activate = _activation.activate

def sigmoid(arg1, arg2):
    return _activation.sigmoid(arg1, arg2)
sigmoid = _activation.sigmoid

def softplus(arg1, arg2):
    return _activation.softplus(arg1, arg2)
softplus = _activation.softplus

def softsign(arg1, arg2):
    return _activation.softsign(arg1, arg2)
softsign = _activation.softsign

def hard_sigmoid(arg1, arg2):
    return _activation.hard_sigmoid(arg1, arg2)
hard_sigmoid = _activation.hard_sigmoid

def exp_activation(arg1, arg2):
    return _activation.exp_activation(arg1, arg2)
exp_activation = _activation.exp_activation

def exponential(arg1):
    return _activation.exponential(arg1)
exponential = _activation.exponential

def relu(arg1, arg2):
    return _activation.relu(arg1, arg2)
relu = _activation.relu

def elu(arg1, arg2, arg3):
    return _activation.elu(arg1, arg2, arg3)
elu = _activation.elu

def selu(arg1, arg2):
    return _activation.selu(arg1, arg2)
selu = _activation.selu

def hyper_tan(arg1, arg2):
    return _activation.hyper_tan(arg1, arg2)
hyper_tan = _activation.hyper_tan

def softmax(arg1, arg2):
    return _activation.softmax(arg1, arg2)
softmax = _activation.softmax
class input(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _activation.new_input(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _activation.delete_input
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _activation.input___getitem__(self, index)

    def __setitem__(self, index, value):
        return _activation.input___setitem__(self, index, value)

    def cast(self):
        return _activation.input_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _activation.input_frompointer
    if _newclass:
        frompointer = staticmethod(_activation.input_frompointer)
input_swigregister = _activation.input_swigregister
input_swigregister(input)

def input_frompointer(t):
    return _activation.input_frompointer(t)
input_frompointer = _activation.input_frompointer

# This file is compatible with both classic and new-style classes.


